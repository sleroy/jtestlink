allprojects {
  

}
apply plugin: "sonar-runner"
apply plugin: 'jacoco'

sonarRunner {
	// toolVersion = "2.4"

	// Fine grained control over the runner process
	//    forkOptions {
	//        maxHeapSize = '1024m'
	//    }
	sonarProperties {
		property "sonar.host.url", "http://192.168.1.1:9000"
		property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
		property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
		property "sonar.jdbc.username", "sonar"
		property "sonar.jdbc.password", "sonar"
	}
}


subprojects {
        apply plugin: 'java'
        apply plugin: 'eclipse-wtp'
        apply plugin: 'idea'
        apply plugin: "project-report"
        apply plugin: 'jacoco'
        apply plugin: 'groovy'
        apply plugin: 'findbugs'


        compileJava {
	        //enable compilation in a separate daemon process
	        options.fork = true
	        sourceCompatibility = 1.7
	        targetCompatibility = 1.7
	        //enable incremental compilation
	        options.incremental = true
        }

        repositories {
	        mavenLocal()
	        mavenCentral()
        }


        
        //TEST FRAMEWORKS DEPENDENCIES
        ext.JUNIT= "junit:junit:4.12"
        ext.LOGGING = "ch.qos.logback:logback-classic:$LOG_LOGBACK"
        ext.tests_frameworks = [
	        JUNIT,
	        "org.mockito:mockito-all:1.9.5",
	        "cglib:cglib-nodep:2.2.2",
	        "org.hamcrest:hamcrest-core:1.3",
	        "org.objenesis:objenesis:1.3",
	        'org.hamcrest:hamcrest-all:1.3'
        ]
		
		
		dependencies {
		
			testCompile LOGGING
			testCompile tests_frameworks // TEST FRAMEWORKS
			testCompile("org.easymock:easymock:3.1") { exclude group: 'org.objenesis' }
			testRuntime 'org.apache.logging.log4j:log4j-core:2.0.2'
			testCompile('org.spockframework:spock-core:1.0-groovy-2.4') { exclude group: 'junit' }
			testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
		}

        test {
	        if (project.hasProperty("logTest")) {
		        // listen to events in the test execution lifecycle
		        beforeTest { descriptor ->
			        logger.lifecycle("Running test: " + descriptor)
		        }
		        // listen to standard out and standard error of the test JVM(s)
		        onOutput { descriptor, event ->
			        logger.lifecycle("Test: " + descriptor + " : " + event.message )
		        }
		        // show standard out and standard error of the test JVM(s) on the console
		        testLogging.showStandardStreams = true

	        }


	        // set heap size for the test JVM(s)
	        minHeapSize = "128m"
	        maxHeapSize = "512m"

	        // set JVM arguments for the test JVM(s)
	        jvmArgs '-XX:MaxPermSize=256m'

        }

        // Marker Task to enable findbugs.
        task findbugs(
		        group: "Verification",
		        description: """Marker task to enabled findbugs. Findbugs is by default
                        disabled. E.g. ( ./gradlew findbugs build )"""
        )



        gradle.taskGraph.whenReady { taskGraph ->
	        tasks.findbugsMain.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
	        tasks.findbugsTest.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
        }

        findbugs {
	        ignoreFailures = true
	        effort = "max"

        }

        tasks. withType(FindBugs) {
	        reports { xml.enabled=true }
        }



        eclipse {
	        classpath {
		        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
	        }
        }

        task wrapper(type: Wrapper) { gradleVersion = '1.12' }

		
}


task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
        dependsOn = subprojects.test
        sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
        classDirectories = files(subprojects.sourceSets.main.output)
        executionData = files(subprojects.jacocoTestReport.executionData)
        reports {
	        html.enabled = true
	        xml.enabled = true
	        csv.enabled = false
	        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
        onlyIf = { true }
        doFirst {
	        executionData = files(executionData.findAll { it.exists() })
        }
}

