buildscript {
	ext { springBootVersion = '1.2.1.RELEASE' }
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: "sonar-runner"
apply plugin: "project-report"
apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: 'findbugs'






sonarRunner {
	// toolVersion = "2.4"

	// Fine grained control over the runner process
	//    forkOptions {
	//        maxHeapSize = '1024m'
	//    }
	sonarProperties {
		property "sonar.host.url", "http://192.168.1.1:9000"
		property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
		property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
		property "sonar.jdbc.username", "sonar"
		property "sonar.jdbc.password", "sonar"
	}
}


war {
	baseName = 'corolla'
	version = '0.0.1-SNAPSHOT'
}


compileJava {
	//enable compilation in a separate daemon process
	options.fork = true
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	//enable incremental compilation
	options.incremental = true
}
repositories {
	mavenLocal()
	mavenCentral()
}

configurations { providedRuntime }

ext.WICKET='7.0.0-M5'


//TEST FRAMEWORKS DEPENDENCIES
ext.JUNIT= "junit:junit:4.12"
ext.LOGGING = "ch.qos.logback:logback-classic:$LOG_LOGBACK"
ext.tests_frameworks = [
	JUNIT,
	"org.mockito:mockito-all:1.9.5",
	"cglib:cglib-nodep:2.2.2",
	"org.hamcrest:hamcrest-core:1.3",
	"org.objenesis:objenesis:1.3",
	'org.hamcrest:hamcrest-all:1.3'
]


dependencies {
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.boot:spring-boot-starter-jdbc")
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-web")
	//compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile 'org.springframework.data:spring-data-rest-webmvc:2.2.2.RELEASE'


	compile "org.apache.wicket:wicket:$WICKET"
	compile "org.apache.wicket:wicket-bootstrap:0.17"
	compile "org.apache.wicket:wicket-native-websocket-tomcat:$WICKET"
	compile "org.apache.wicket:wicket-spring:$WICKET"
	compile "org.apache.wicket:wicket-devutils:$WICKET"
	compile "org.apache.wicket:wicket-extensions:$WICKET"
	compile "com.googlecode.wicket-jquery-ui:wicket-jquery-ui:$WICKET"
	compile "com.googlecode.wicket-jquery-ui:wicket-jquery-ui-theme-southstreet:$WICKET"
	compile "com.googlecode.wicket-jquery-ui:wicket-kendo-ui:$WICKET"
	compile "com.googlecode.wicket-jquery-ui:wicket-kendo-ui-theme-bootstrap:$WICKET"
	



	compile "org.slf4j:slf4j-api:$LOG_SLF4J"
	compile "org.slf4j:jcl-over-slf4j:$LOG_SLF4J"
	compile "org.slf4j:log4j-over-slf4j:$LOG_SLF4J"

	compile 'org.apache.commons:commons-lang3:3.3.2'
	compile "org.ocpsoft.prettytime:prettytime:$PRETTY_TIME"
	compile 'com.google.code.findbugs:jsr305:3.0.0'
	compile 'com.h2database:h2:1.4.185'
	compile "joda-time:joda-time:2.4"


	testCompile LOGGING
	testCompile tests_frameworks // TEST FRAMEWORKS
	testCompile("org.easymock:easymock:3.1") { exclude group: 'org.objenesis' }
	testRuntime 'org.apache.logging.log4j:log4j-core:2.0.2'
	testCompile 'org.codehaus.groovy:groovy-all:2.3.7'
	testCompile('org.spockframework:spock-core:0.7-groovy-2.0') { exclude group: 'junit' }

	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
	testCompile("org.springframework.boot:spring-boot-starter-test")
}

test {
	if (project.hasProperty("logTest")) {
		// listen to events in the test execution lifecycle
		beforeTest { descriptor ->
			logger.lifecycle("Running test: " + descriptor)
		}
		// listen to standard out and standard error of the test JVM(s)
		onOutput { descriptor, event ->
			logger.lifecycle("Test: " + descriptor + " : " + event.message )
		}
		// show standard out and standard error of the test JVM(s) on the console
		testLogging.showStandardStreams = true

	}


	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'

}

// Marker Task to enable findbugs.
task findbugs(
		group: "Verification",
		description: """Marker task to enabled findbugs. Findbugs is by default
                disabled. E.g. ( ./gradlew findbugs build )"""
		)



gradle.taskGraph.whenReady { taskGraph ->
	tasks.findbugsMain.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
	tasks.findbugsTest.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
}

findbugs {
	ignoreFailures = true
	effort = "max"

}

tasks. withType(FindBugs) {
	reports { xml.enabled=true }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	dependsOn = subprojects.test
	sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.sourceSets.main.output)
	executionData = files(subprojects.jacocoTestReport.executionData)
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
		xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
	onlyIf = { true }
	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}


eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
	}
}

task wrapper(type: Wrapper) { gradleVersion = '1.12' }


