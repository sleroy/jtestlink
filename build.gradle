/**
 * Package of dependencies
 */
plugins {
//    id "com.jfrog.bintray" version "1.1"
    id "com.github.kt3k.coveralls" version "2.4.0"

}


println "---------------------------------------------------------------------------------------"
println "How to use Komea build script :                                                        "
println "HINT : To print unit tests logs uses -PlogTest"
println "HINT : To upload to bintray , set the properties         -Dbintray_net_user= -Dbintray_net_key="
println "---------------------------------------------------------------------------------------"

//TEST FRAMEWORKS DEPENDENCIES
ext.JUNIT= "junit:junit:${TEST_JUNIT}";
ext.LOGGING = "ch.qos.logback:logback-classic:$LOG_LOGBACK"
ext.tests_frameworks = [
    JUNIT,
	"org.mockito:mockito-all:${TEST_MOCKITO}",
	"cglib:cglib-nodep:${TEST_CGLIB}",
	"org.hamcrest:hamcrest-core:${TEST_HAMCREST}",
	"org.objenesis:objenesis:${TEST_OBJENESIS}",
	"org.hamcrest:hamcrest-all:${TEST_HAMCREST}",
        "com.tocea.frameworks:bench4j-core:${TEST_BENCH4J}",
        "com.tocea.frameworks:bench4j-htmlreport:${TEST_BENCH4J}"
]

ext.GIT = "git"

def getGitBranch()  {

    def gitExe = GIT

    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            executable = GIT
            args = [
				'rev-parse',
				'--abbrev-ref',
				'HEAD'
            ]
            standardOutput = stdout;
        }
        def currentBranch = stdout.toString().trim()

        return currentBranch;
    } catch(Exception e) {
        return "local";
    }
}


/**
Specific parent plugin
 */
apply plugin: "sonar-runner"

sonarRunner {
    // toolVersion = "2.4"

    // Fine grained control over the runner process
    //    forkOptions {
    //        maxHeapSize = '1024m'
    //    }
    sonarProperties {
        property "sonar.host.url", "http://192.168.1.1:9000"
        property "sonar.jdbc.url", "jdbc:mysql://192.168.1.1:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
    }
}


allprojects {



    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "project-report"
    apply plugin: 'jacoco'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'
    apply plugin: 'groovy'





    /** REPOSITORIES */
    repositories {

        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            credentials {
                username mavenUser
                password mavenPassword
            }
            // Look for POMs and artifacts, such as JARs, here
            url "http://repo.jenkins-ci.org/public"
        }

        maven {
            url "http://dl.bintray.com/sleroy/maven"
        }
    }


    /** JAVA COMPILATION */
    compileJava {
        //enable compilation in a separate daemon process
        options.fork = true
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
        //enable incremental compilation
        options.incremental = true
    }



    /** CONFIGURATIONS */
    configurations { provided }

    sourceSets {
        main {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }


        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }

    }

    if (project.hasProperty("depcheck")) {
        configurations.all {

            resolutionStrategy { failOnVersionConflict() }
        }
    }

    configurations.all {
        resolutionStrategy {
            //        force    'org.objenesis:objenesis:1.3'
            force JUNIT
        }
    }


    /** DEPENDENCIES */



    dependencies {

        compile "org.slf4j:slf4j-api:$LOG_SLF4J"
        compile "org.slf4j:jcl-over-slf4j:$LOG_SLF4J"
        compile "org.slf4j:log4j-over-slf4j:$LOG_SLF4J"

		compile "com.google.code.findbugs:jsr305:$FINDBUGS"
		compile "com.google.guava:guava:$GUAVA"
        compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"
		
		compile	"org.springframework.data:spring-data-mongodb:$SPRING_MONGO"
		
		compile "org.javers:javers-spring:$JAVERS"
		compile "org.javers:javers-persistence-mongo:$JAVERS"
		
		compile "org.mongodb:mongo-java-driver:$MONGO_DRIVER"
		compile "com.github.fakemongo:fongo:$FONGO"
		testCompile "com.lordofthejars:nosqlunit-mongodb:$TEST_NOSQLUNIT"
		
        testCompile LOGGING

        testCompile tests_frameworks // TEST FRAMEWORKS

        testCompile("org.easymock:easymock:${TEST_EASYMOCK}") { exclude group: 'org.objenesis' }
        testRuntime "org.apache.logging.log4j:log4j-core:${LOG4J}"

        testCompile("org.spockframework:spock-core:$TEST_SPOCK") { exclude group: 'junit' }
        testCompile("org.spockframework:spock-spring:$TEST_SPOCK") { exclude group: 'junit' }
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

		testCompile "org.springframework.security:spring-security-test:$SPRING_SECU"
		
		testCompile "com.jayway.jsonpath:json-path:$TEST_JAYWAY_JSONPATH"
		testCompile "com.jayway.jsonpath:json-path-assert:$TEST_JAYWAY_JSONPATH"
		
    }

    configurations.all {
          resolutionStrategy {
                force   "commons-logging:commons-logging:$APACHE_COMMONLOG"
                force   "org.slf4j:slf4j-api:$LOG_SLF4J"
                force   "commons-io:commons-io:$APACHE_COMMONIO"
                force   "commons-lang:commons-lang:$APACHE_COMMONLANG"
                force   "cglib:cglib-nodep:${TEST_CGLIB}"

                force   "org.springframework:spring-webmvc:$SPRING_VERSION"
                force   "org.springframework:spring-aop:$SPRING_VERSION"
                force   "org.springframework:spring-beans:$SPRING_VERSION"
                force   "org.springframework:spring-context:$SPRING_VERSION"
                force   "org.springframework:spring-core:$SPRING_VERSION"
                force   "org.springframework:spring-expression:$SPRING_VERSION"
                force   "org.springframework:spring-web:$SPRING_VERSION"
                //force   "org.springframework:spring-orm:$SPRING_VERSION"
				force   "org.springframework:spring-tx:$SPRING_VERSION"
				//force   "org.springframework.data:spring-data-commons:$SPRING_DATA"
                force   "org.springframework.security:spring-security-core:$SPRING_SECU"

				force   "org.aspectj:aspectjrt:$ASPECTJRT"
                force   "com.fasterxml.jackson.core:jackson-databind:$JACKSON"
				force 	"com.fasterxml.jackson.core:jackson-annotations:$JACKSON"
                force   "org.slf4j:slf4j-api:$LOG_SLF4J"
                force   "org.slf4j:jcl-over-slf4j:$LOG_SLF4J"
                force   "org.slf4j:log4j-over-slf4j:$LOG_SLF4J"
				force   "org.javassist:javassist:$JAVASSIST"
				force 	"org.hamcrest:hamcrest-core:$TEST_HAMCREST"
				force 	"org.objenesis:objenesis:$TEST_OBJENESIS"

        }
     }


    task unitTest(type : Test) {
        exclude "**/**IT"
    }


    /**
    TESTS
     */

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }

    test {
        if (project.hasProperty("logTest")) {
            // listen to events in the test execution lifecycle
            beforeTest { descriptor ->
                logger.lifecycle("Running test: " + descriptor)

            }
            // listen to standard out and standard error of the test JVM(s)
            onOutput { descriptor, event ->
                logger.lifecycle("Test: " + descriptor + " : " + event.message )
            }
            // show standard out and standard error of the test JVM(s) on the console
            testLogging.showStandardStreams = true

        }


        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

    }


    task print <<  { println "$rootProject.buildDir.path" }

    task "create-dirs" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }




    tasks.withType(JavaCompile) { options.incremental = true }

    /** FINDBUGS -------------------------------------------------------------- */

    // Marker Task to enable findbugs.
    task findbugs(
        group: "Verification",
        description: """Marker task to enabled findbugs. Findbugs is by default
                        disabled. E.g. ( ./gradlew findbugs build )"""
    )





    gradle.taskGraph.whenReady { taskGraph ->
        tasks.findbugsMain.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
        tasks.findbugsTest.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
    }

    findbugs {
        ignoreFailures = true
        effort = "max"

    }

    tasks. withType(FindBugs) {
        reports { xml.enabled=true }
    }

    uploadArchives {
    	repositories {
    		mavenDeployer {
    			repository(url: "http://zeus.tocea:8081/nexus/content/repositories/corolla")
    			{
    				authentication(userName: mavenUser, password: mavenPassword)
    			}
    		}
    	}
    }

}



subprojects {

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}



coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}
/** BINTRAY CONFIGURATION */
//apply from: "$rootDir/config/bintray.gradle"

/**
Documentation
: http://stackoverflow.com/questions/9547170/in-gradle-how-do-i-declare-common-dependencies-in-a-single-place
: http://gradle.codehaus.org/Cookbook
: http://stackoverflow.com/questions/8343871/mark-gradle-build-unstable-in-jenkins-when-junit-tests-fail
 */


task wrapper(type: Wrapper) {
    gradleVersion = GRADLE_VERSION

}

